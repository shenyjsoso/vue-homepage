{"remainingRequest":"/Users/soso/hygst/HOMEPAGE/homepage-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/soso/hygst/HOMEPAGE/homepage-web/src/components/Dashboard/Histogram.vue?vue&type=style&index=0&id=68401109&lang=less&scoped=true&","dependencies":[{"path":"/Users/soso/hygst/HOMEPAGE/homepage-web/src/components/Dashboard/Histogram.vue","mtime":1588907355404},{"path":"/Users/soso/hygst/HOMEPAGE/homepage-web/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soso/hygst/HOMEPAGE/homepage-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/soso/hygst/HOMEPAGE/homepage-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/soso/hygst/HOMEPAGE/homepage-web/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soso/hygst/HOMEPAGE/homepage-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soso/hygst/HOMEPAGE/homepage-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLy9AaW1wb3J0IHVybCgpOyDlvJXlhaXlhazlhbFjc3PnsbsKLmhpc3RvZ3JhbXsKICAgIGZsZXg6IDE7CiAgICAvLyB3aWR0aDoxMDAlOwogICAgLy8gaGVpZ2h0OjM2NHB4OwogICAgbWluLXdpZHRoOiAzNjBweDsKICAgIGJhY2tncm91bmQ6cmdiYSgyNTUsMjU1LDI1NSwxKTsKfQouaGVhZHsKICAgIGhlaWdodDogNjBweDsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6c3RhcnQ7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgbWFyZ2luOiAwIDI0cHg7CiAgIAogICAgLnRpdHRsZXsKICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgZm9udC1mYW1pbHk6TWljcm9zb2Z0WWFIZWlTZW1pYm9sZDsKICAgICAgICBjb2xvcjpyZ2JhKDM4LDM4LDM4LDEpOwogICAgfQogIAp9Cg=="},{"version":3,"sources":["Histogram.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"Histogram.vue","sourceRoot":"src/components/Dashboard","sourcesContent":["<!-- 柱状图 -->\n<template>\n<div class='histogram'>\n     <div class=\"head\">\n        <span class=\"tittle\">监控消息总量</span>\n    \n    </div>\n    <ve-histogram :data=\"chartData\" :settings=\"chartSettings\" :extend=\"chartExtend\"></ve-histogram>\n    \n</div>\n</template>\n\n<script>\n//这里可以导入其他文件（比如：组件，工具js，第三方插件js，json文件，图片文件等等）\n\nexport default {\n//import引入的组件需要注入到对象中才能使用\n    components: {\n\n    },\n    data() {\n        //这里存放数据\n        this.chartSettings = {\n            // xAxisType: 'value',\n            itemStyle:{\n                color:'#5B8FF9', \n            },\n            axisSite: { right: ['时间'] },\n            yAxisType: ['value', 'value'],\n            yAxisName: ['数量', '时间'],\n            label:{\n                show:true,\n                position:'top',\n                formatter: '{c}',\n                color:'#595959'\n            }\n        }\n        this.chartExtend= {\n                series: {},\n                tooltip: {},\n                grid: {\n                //  x:150,  //左留白\n                    y:35,   //上留白\n                    x2:15,  //右留白\n                    // y2:100  \n                },\n                legend: {\n                    show:false\n                },\n                xAxis:{\n                    splitLine:{\n                        show:false\n                    }\n                }\n                // yAxis:[{\n                //     name:'总量',\n                //     type:'value'\n                // },{\n                //     name:'耗时',\n                //     type:'value'\n                // }]\n            }\n        return {\n        chartData: {\n          columns: ['类型', '消息量', '时间'],\n          rows: [\n            { '类型': '监控总量', '消息量': 1393,  },\n            { '类型': 'MQ总量', '消息量': 3530,  },\n            { '类型': 'WS总量', '消息量': 2923,   },\n            { '类型': '异常消息量', '消息量': 1723, },\n            { '类型': '平均耗时',   '时间': 11 },\n            { '类型': '最大耗时',   '时间': 21 }\n          ]\n        }\n        };\n    },\n    props: {\n    },\n    //计算属性 类似于data概念\n    computed: {\n\n    },\n    //监控data中的数据变化\n    watch: {\n\n    },\n    //方法集合\n    methods: {\n\n    },\n    //生命周期 - 创建完成（可以访问当前this实例）\n    created() {\n\n    },\n    //生命周期 - 挂载完成（可以访问DOM元素）\n    mounted() {\n\n    },\n    beforeCreate() {}, //生命周期 - 创建之前\n    beforeMount() {}, //生命周期 - 挂载之前\n    beforeUpdate() {}, //生命周期 - 更新之前\n    updated() {}, //生命周期 - 更新之后\n    beforeDestroy() {}, //生命周期 - 销毁之前\n    destroyed() {}, //生命周期 - 销毁完成\n    activated() {}, //如果页面有keep-alive缓存功能，这个函数会触发\n}\n</script>\n<style lang='less' scoped>\n//@import url(); 引入公共css类\n.histogram{\n    flex: 1;\n    // width:100%;\n    // height:364px;\n    min-width: 360px;\n    background:rgba(255,255,255,1);\n}\n.head{\n    height: 60px;\n    display: flex;\n    justify-content:start;\n    align-items: center;\n    margin: 0 24px;\n   \n    .tittle{\n        font-size: 16px;\n        font-family:MicrosoftYaHeiSemibold;\n        color:rgba(38,38,38,1);\n    }\n  \n}\n</style>"]}]}